ANOTAÇÕES AULA 2 LAB AOC (20/02)
------------------------------------------------------

------- .data ---------

-> str1: (string 1) - RÓTULO DA VARIAVEL

>>.ascii -> string não terminada com /0 (delimitador de string)
>>.asciiz -> string terminada com /0 (delimitador de string)

>> .word -> variáveis inteiras (4 Bytes)

->Código:

str1: .ascii "Exemplo " 
str2: .ascii "de soma "
str3: .asciiz "e subtracao. Resultado: " # string terminada em 0
str4: .asciiz "Erro de divisao por zero!"

varg: .word 0xfffffff
varh: .word 20
vari: .word 10
varj: .word 20
varf: .word 0

------- .text ---------

-> O que deve ser feito:

#f = (g*h)/(i-j);
#g , h , i e j: regs. $s1, $s2 , $s3  e $s4 respect.; f: registrador $s0

-> Código:

.text
.globl main
.ent main
main:

# leitura das variaveis e carga nos registradores
        
        li $v0, 5
        syscall
	sw $v0, varg --> transfere o que o usuário digitou para a memória, sobrescrevendo os valores originais 
	
	li $v0, 5
	syscall
	sw $v0, varh
	
	li $v0, 5
	syscall
	sw $v0, vari

	
	li $v0, 5
	syscall
	sw $v0, varj
	
	lw $s1, varg     --> 
	lw $s2, varh     
	lw $s3, vari     
	lw $s4, varj     

#somas e subtração

	mul $t0, $s1, $s2   #$t0 contem g * h  --> multiplicando g 8 h e guardando no t0
	sub $t1, $s3, $s4   #$t1 contem i - j 

	beq $t1, $zero, erro --> instrução de desvio | "branch if equal" (desvia se igual) = if($t1 == $zero)
											     erro; (ou pula pra outro endereço)

	div $s0, $t0, $t1   #$s0: resultado --> divisão de $t0 / $t1 e guardando o resultado em $s0 (f)
	sw $s0, varf  	    # armazena resultado em f --> "store word", transferência de $s0 para a varf na memória
	la $a0, str1 	# endereco da string não terminada com NULL --> o la pega o rotulo do string armazena no registrador a0
	li $v0, 4 	# imprime string --> chamada 4 imprime o string na saída | printf("")
	syscall --> 

	li $v0, 1 	# imprime inteiro --> printf("") de inteiro
	lw $a0, varf	# value for int to print
	syscall
	j feito --> "jump"; salto; pula para as intruções que ele deve executar

erro:  <<
    	la $a0, str4 	# endereco da string n o terminada com NULL
	li $v0, 4 	# imprime string
	syscall

feito:
	li $v0, 10
	syscall # feito!

.end main
